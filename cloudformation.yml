AWSTemplateFormatVersion: 2010-09-09

Description: Creates a static website (S3, CloudFront and Route53 record)

Parameters:
  Env:
    Type: String
    Description: Env type
    Default: prod
  DomainName:
    Type: String
    Description: References an existing Route53 zone. Eg. bluemage.ca
  HostedZoneId:
    Type: String
    Description: References an existing Route53 Zone Id for DomainName
  SubDomain:
    Type: String
    Description: Subdomain for referenced hosted zone
    Default: www
  ExistingAcmCertificate:
    Type: String
    Description: the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
    AllowedPattern: arn:aws:acm:.*
  PriceClass:
    Type: String
    Description: CloudFront price class
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  LogPrefix:
    Type: String
  UserArn:
    Type: String

Conditions:
  IsDev: !Equals [!Ref Env, dev]

Resources:
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter7Days
            Status: Enabled
            ExpirationInDays: 7
  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Statement:
          - Sid: ListReadWriteDeleteAccess
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Effect: Allow
            Resource:
              - !Join [ "", [ !GetAtt LogBucket.Arn, "/*" ] ]
              - !GetAtt LogBucket.Arn
            Principal:
                AWS: !Ref UserArn
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
        RoutingRules:
          -
            RedirectRule:
              ReplaceKeyWith: index.html
            RoutingRuleCondition:
              KeyPrefixEquals: /
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: !Sub "Cloudfront Distribution for ${SubDomain}.${DomainName}"
        Origins:
          # Use S3 website endpoint to allow S3 redirect rules
          - DomainName: !Sub "${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        CustomErrorResponses:
          # Use our own custom 404 page for 404 errors and cache response for 1h
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 3600
          # Use custom 404 pages for missing S3 objects and cache for 5 min
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: false
          Bucket: !GetAtt LogBucket.DomainName
          Prefix: !Ref LogPrefix
        Aliases:
          - !Sub "${SubDomain}.${DomainName}"
          - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          DefaultTTL: !If [IsDev, 0, 86400]
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: !Ref PriceClass
        ViewerCertificate:
          AcmCertificateArn: !Ref ExistingAcmCertificate
          SslSupportMethod: sni-only

  WebsiteDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      RecordSets:
        - Name: !Sub "${SubDomain}.${DomainName}."
          Type: A
          AliasTarget:
            HostedZoneId: !Ref HostedZoneId
            DNSName: !GetAtt WebsiteCloudfront.DomainName
        - Name: !Sub "${SubDomain}.${DomainName}."
          Type: AAAA
          AliasTarget:
            HostedZoneId: !Ref HostedZoneId
            DNSName: !GetAtt WebsiteCloudfront.DomainName
  WebsiteRootDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      RecordSets:
        - Name: !Sub "${DomainName}."
          Type: A
          AliasTarget:
            HostedZoneId: !Ref HostedZoneId
            DNSName: !GetAtt WebsiteCloudfront.DomainName
        - Name: !Sub "${DomainName}."
          Type: AAAA
          AliasTarget:
            HostedZoneId: !Ref HostedZoneId
            DNSName: !GetAtt WebsiteCloudfront.DomainName

Outputs:
  BucketName:
    Value: !Ref WebsiteBucket
    Description: Name of S3 bucket to hold website content
  CloudfrontDistributionId:
    Value: !Ref WebsiteCloudfront
    Description: Cloudfront distribution ID
  CloudfrontEndpoint:
    Value: !GetAtt WebsiteCloudfront.DomainName
    Description: Endpoint for Cloudfront distribution
  WebsiteUrl:
    Value: !Sub "https://${SubDomain}.${DomainName}"